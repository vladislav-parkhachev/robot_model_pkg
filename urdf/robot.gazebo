<?xml version="1.0"?>
<robot>
<gazebo reference="body_link">
<mu1>0.2</mu1>
<mu2>0.2</mu2>
<material>Gazebo/Red</material>
</gazebo>

<gazebo reference="wheel1_link">
<mu1>0.2</mu1>
<mu2>0.2</mu2>
<material>Gazebo/Yellow</material>
</gazebo>

<gazebo reference="wheel2_link">
<mu1>0.2</mu1>
<mu2>0.2</mu2>
<material>Gazebo/Yellow</material>
</gazebo>

<gazebo reference="wheel3_link">
<mu1>0.2</mu1>
<mu2>0.2</mu2>
<material>Gazebo/Yellow</material>
</gazebo>

<gazebo reference="wheel4_link">
<mu1>0.2</mu1>
<mu2>0.2</mu2>
<material>Gazebo/Yellow</material>
</gazebo>

<!-- Controller for the 4-wheeled robot -->
<gazebo>
<plugin name="skid_steer_drive_controller" filename="libgazebo_ros_skid_steer_drive.so">

    <!-- Control update rate in Hz -->
	<updateRate>100.0</updateRate>

    <!-- Leave this empty otherwise, there will be problrms with sending control commands -->
	<robotNamespace> </robotNamespace>

    <!-- Robot kinematics -->
	<leftFrontJoint>wheel4_joint</leftFrontJoint>
	<rightFrontJoint>wheel3_joint</rightFrontJoint>
	<leftRearJoint>wheel2_joint</leftRearJoint>
	<rightRearJoint>wheel1_joint</rightRearJoint>
	<wheelSeparation>${body_link_y_dim+wheel_link_length}</wheelSeparation>
	<wheelDiameter>${2 * wheel_link_radius}</wheelDiameter>

    <!-- Maximum torque which the wheels can produce, in Nm, defaults to 5 Nm -->
	<torque>1000</torque>

    <!-- Topic to receive geometry_msgs/Twist message commands, defaults to "cmd_vel" -->
	<commandTopic>cmd_vel</commandTopic>
    <!-- Topic to publish nav_msgs/Odometry messages, defaults to "odom" -->
	<odometryTopic>odom</odometryTopic>
    <!-- Odometry frame, defaults to "odom" -->
	<odometryFrame>odom</odometryFrame>
    <!-- Robot frame to calculate odometry from, defaults to "base_footprint" -->
	<robotBaseFrame>dummy</robotBaseFrame>
    <!-- Set to true tu publish transforms for the wheel links, defaults to false -->
	<publishWheelTF>true</publishWheelTF>
    <!-- Set to true tu publish transforms for the odometry, defaults to true -->
	<publishOdom>true</publishOdom>
    <!-- Set to true tu publish sensor_msgs/JointState on /joint_states for the wheel joints, defaults to false -->
	<publishWheelJointState>true</publishWheelJointState>
    <!-- This part is required by Gazebo -->
	<covariance_x>0.0001</covariance_x>
	<covariance_y>0.0001</covariance_y>
	<covariance_yaw>0.01</covariance_yaw>
    
</plugin>
</gazebo>

<!-- hokuyo --> 
  <gazebo reference="hokuyo_link">
    <!-- <material>Gazebo/FlatBlack</material> -->
    <sensor type="ray" name="lds_lfcd_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>5</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <resolution>1</resolution>
            <min_angle>0.0</min_angle>
            <max_angle>6.28319</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.120</min>
          <max>7</max>
          <resolution>0.015</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_lds_lfcd_controller" filename="libgazebo_ros_laser.so">
        <topicName>scan</topicName>
        <frameName>hokuyo_link</frameName>
      </plugin>
    </sensor>
  </gazebo>

	<gazebo>
      <plugin name="base_controller" filename="libgazebo_ros_planar_move.so">
        <commandTopic>cmd_vel</commandTopic>
        <odometryTopic>odom</odometryTopic>
        <odometryFrame>odom</odometryFrame>
        <odometryRate>100.0</odometryRate>
        <robotBaseFrame>dummy</robotBaseFrame>
      </plugin>
    </gazebo>

</robot>
